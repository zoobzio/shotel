name: Coverage

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true

    - name: Install dependencies
      run: |
        go mod download
        go install github.com/boumenot/gocover-cobertura@latest

    - name: Run tests with coverage
      run: |
        echo "=== Testing shotel ==="
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

        # Generate coverage report
        go tool cover -func=coverage.out > coverage-summary.txt
        echo "Coverage Summary:"
        tail -1 coverage-summary.txt

        # Generate HTML report
        go tool cover -html=coverage.out -o coverage.html

        # Convert to Cobertura format
        gocover-cobertura < coverage.out > coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.out
        flags: unit
        name: shotel-coverage
        fail_ci_if_error: false
        verbose: true

    - name: Generate coverage badge
      run: |
        # Extract coverage percentage
        COVERAGE=$(go tool cover -func=coverage.out | tail -1 | grep -oE '[0-9]+\.[0-9]+' | tail -1)
        echo "Coverage: $COVERAGE%"
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

        # Determine badge color
        if awk "BEGIN {exit !($COVERAGE >= 80)}"; then
          COLOR="green"
        elif awk "BEGIN {exit !($COVERAGE >= 60)}"; then
          COLOR="yellow"
        else
          COLOR="red"
        fi
        echo "COVERAGE_COLOR=$COLOR" >> $GITHUB_ENV

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.out
          coverage.html
          coverage.xml
          coverage-summary.txt
        retention-days: 30

    - name: Coverage summary
      run: |
        echo "### ðŸ“Š Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Coverage:** ${{ env.COVERAGE }}%" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### Coverage by Package" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        head -n -1 coverage-summary.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
